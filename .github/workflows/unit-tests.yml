# Copyright (C) 2005 - 2021 Settlers Freaks <sf-team at siedler25.org>
#
# SPDX-License-Identifier: GPL-2.0-or-later

name: Unit tests

on:
  push:
  pull_request:

concurrency:
  group: ${{format('tests-{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

env:
  CMAKE_VERSION: 3.26.0
  BOOST_VERSION: 1.81.0
  ADDITIONAL_CMAKE_FLAGS: -DRTTR_ENABLE_BENCHMARKS=ON

jobs:
  Linux:
    strategy:
      matrix:
        include:
          # MacOSX
          - { compiler: clang,    os: macos-12,     buildType: Debug, cxxStandard: 14 }
          # Linux GCC
          # GCC 9 is known to show a few warnings that GCC 10 has "fixed", make sure this doesn't happen for us
          - { compiler: gcc-9,    os: ubuntu-20.04, buildType: Debug }
          - { compiler: gcc-10,   os: ubuntu-20.04, buildType: Debug, cxxStandard: 14, coverage: true }
          - { compiler: gcc-10,   os: ubuntu-20.04, buildType: Debug, cxxStandard: 17 }
          - { compiler: gcc-10,   os: ubuntu-20.04, buildType: Release }
          - { compiler: gcc-11,   os: ubuntu-22.04, buildType: Debug, cxxStandard: 14, boostVersion: 1.73.0 }
          - { compiler: gcc-11,   os: ubuntu-22.04, buildType: Release,                boostVersion: 1.73.0 }
          # Linux clang
          - { compiler: clang-10, os: ubuntu-20.04, buildType: Debug }
          - { compiler: clang-11, os: ubuntu-20.04, buildType: Debug, cxxStandard: 14, externalSanitizer: true }
          - { compiler: clang-11, os: ubuntu-20.04, buildType: Debug, cxxStandard: 17 }
          - { compiler: clang-11, os: ubuntu-20.04, buildType: Release }
          - { compiler: clang-16, os: ubuntu-20.04, buildType: Debug, cxxStandard: 14, externalSanitizer: true }
          - { compiler: clang-16, os: ubuntu-20.04, buildType: Release }

    runs-on: ${{matrix.os}}

    steps:
      - run: echo "DEPS_DIR=${{runner.temp}}/.cache" >> $GITHUB_ENV
      - run: echo "CMAKE_VERSION=${{matrix.cmakeVersion}}" >> $GITHUB_ENV
        if: matrix.cmakeVersion
      - run: echo "BOOST_VERSION=${{matrix.boostVersion}}" >> $GITHUB_ENV
        if: matrix.boostVersion
      - run: echo "ADDITIONAL_CMAKE_FLAGS=${ADDITIONAL_CMAKE_FLAGS} -DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_SANITIZERS=ON" >> $GITHUB_ENV
        if: matrix.externalSanitizer

      - uses: actions/checkout@v3
        if: "!matrix.coverage"
        with:
          submodules: true
      # Coverage collection requires access to history to find merge-base
      - uses: actions/checkout@v3
        if: matrix.coverage
        with:
          submodules: true
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{env.DEPS_DIR}}
          key: ${{matrix.os}}-${{env.BOOST_VERSION}}

      - name: Add LLVM repo
        if: matrix.compiler == 'clang-16' && matrix.os == 'ubuntu-20.04'
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-16 main'
          sudo apt update

      - name: Install Compiler
        if: "!startsWith(runner.os, 'macos')"
        run: |
          pkgs=${{matrix.compiler}}
          pkgs=${pkgs/gcc-/g++-}
          sudo apt install $pkgs

      - name: Setup compiler
        run: |
            CC=${{matrix.compiler}}
            if [[ "$CC" =~ clang ]]; then
              CXX=${CC/clang/clang++}
            elif [[ "$CC" =~ gcc ]]; then
              CXX=${CC/gcc/g++}
            fi
            ver=7 # default
            if [[ "$CC" =~ gcc- ]]; then
              ver="${CC##*gcc-}"
            fi
            GCOV=gcov-${ver}
            echo "CC=$CC" >> $GITHUB_ENV
            echo "CXX=$CXX" >> $GITHUB_ENV
            echo "GCOV=$GCOV" >> $GITHUB_ENV

      - name: Install system packages (Linux)
        if: "!startsWith(runner.os, 'macos')"
        run: |
          sudo apt update
          sudo apt install gettext libsdl2-dev libsdl2-mixer-dev libcurl4-openssl-dev libbz2-dev libminiupnpc-dev liblua5.2-dev

      - name: Install system packages (OSX)
        if: startsWith(runner.os, 'macos')
        run: |
          brew install cmake boost sdl2 sdl2_mixer gettext miniupnpc libiconv
          echo /usr/local/opt/gettext/bin >> $GITHUB_PATH
          BOOST_ROOT=$(find /usr/local/Cellar/boost/${BOOST_VERSION}_* -maxdepth 0)
          echo "BOOST_ROOT=${BOOST_ROOT}" >> $GITHUB_ENV

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{matrix.os}}-${{matrix.compiler}}-${{matrix.buildType}}-${{matrix.boostVersion}}
          max-size: 200M

      - name: Install dependencies
        if: "!startsWith(runner.os, 'macos')"
        run: |
          # Minimum requirements: CMake 3.9, Boost 1.69
          CMAKE_DIR="${DEPS_DIR}/cmake"
          external/libutil/tools/ci/installCMake.sh "${CMAKE_VERSION}" "${CMAKE_DIR}"
          echo "${CMAKE_DIR}/bin" >> $GITHUB_PATH

          BOOST_ROOT="${DEPS_DIR}/boost${BOOST_VERSION}"
          echo "BOOST_ROOT=${BOOST_ROOT}" >> $GITHUB_ENV
          echo "ADDITIONAL_CMAKE_FLAGS=${ADDITIONAL_CMAKE_FLAGS} -DBoost_NO_SYSTEM_PATHS=ON -DBoost_NO_BOOST_CMAKE=ON" >> $GITHUB_ENV
          external/libutil/tools/ci/installBoost.sh "${BOOST_VERSION}" "${BOOST_ROOT}" "filesystem,system,program_options,thread,test,locale,iostreams,regex" shared
          cat /tmp/boost.log || true
          ls -la ${BOOST_ROOT}/lib/ || true

      - name: Enable coverage collection
        if: matrix.coverage
        run: echo "ADDITIONAL_CMAKE_FLAGS=${ADDITIONAL_CMAKE_FLAGS} -DRTTR_ENABLE_COVERAGE=ON" >> $GITHUB_ENV

      - name: Set C++ standard
        if: matrix.cxxStandard
        run: echo "ADDITIONAL_CMAKE_FLAGS=${ADDITIONAL_CMAKE_FLAGS} -DCMAKE_CXX_STANDARD=${{matrix.cxxStandard}}" >> $GITHUB_ENV

      - name: Setup environment
        run: |
          echo "BUILD_TYPE=${{matrix.buildType}}" >> $GITHUB_ENV
          echo "TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Build
        run: tools/ci/travisBuild.sh

      - run: tools/ci/collectCoverageData.sh && external/libutil/tools/ci/uploadCoverageData.sh
        if: matrix.coverage && success()
      - run: tools/ci/checkTestCoverage.sh
        if: matrix.coverage && success()
      - name: Upload coverage (Coveralls)
        if: matrix.coverage && success()
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: srccov.info
