language: cpp
dist: xenial
if: branch = master

addons:
  apt: &defApt
    sources: &defSrcs
      - ubuntu-toolchain-r-test
    packages: &defPackages
      - libsdl1.2-dev
      - libsdl-mixer1.2-dev
      - libsdl2-dev
      - libsdl2-mixer-dev
      - libcurl4-openssl-dev
      - libbz2-dev
      - libminiupnpc-dev
      - liblua5.2-dev
  homebrew:
    packages:
      - ccache
      - sdl
      - sdl_mixer
      - gettext
      - miniupnpc
      - git-lfs
    update: true

cache:
  - ccache
  - directories:
    - ${HOME}/.cache

before_install:
  - eval "${MATRIX_EVAL}"
  - DEPS_DIR="${HOME}/.cache"
  - mkdir -p "${DEPS_DIR}"
  - git lfs install
  - git lfs pull

install:
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew link gettext --force; fi
  # Minimum requirements: CMake 3.8.2, Boost 1.64
  - |
    CMAKE_DIR="${DEPS_DIR}/cmake"
    external/libutil/tools/ci/installCMake.sh "3.8.2" "${CMAKE_DIR}"
    export PATH="${CMAKE_DIR}/bin:${PATH}"
  - |
    BOOST_VERSION=${BOOST_VERSION:-1.64.0}
    export BOOST_ROOT="${DEPS_DIR}/boost${BOOST_VERSION}"
    export ADDITIONAL_CMAKE_FLAGS="${ADDITIONAL_CMAKE_FLAGS} -DBoost_NO_SYSTEM_PATHS=ON -DBoost_NO_BOOST_CMAKE=ON"
    external/libutil/tools/ci/installBoost.sh "${BOOST_VERSION}" "${BOOST_ROOT}" "filesystem,system,program_options,thread,test,locale,iostreams,regex" shared

before_script: source external/libutil/tools/ci/setupXServer.sh

script: tools/ci/travisBuild.sh

jobs:
  fast_finish: true
  include:
    # Clang-Tidy main
    - &clang-tidy
      os: linux
      addons:
        apt:
          sources: [*defSrcs, llvm-toolchain-xenial-8]
          packages: [*defPackages, g++-7, clang-8, clang-tidy-8]
      env:
        - MATRIX_EVAL="CXX=clang++-8 && CC=clang-8"
      script: tools/ci/runClangTidy.sh main
    - <<: *clang-tidy
      script: tools/ci/runClangTidy.sh external
    - &linux-gcc6
      os: linux
      compiler: gcc
      env:
        - MATRIX_EVAL="CXX=g++-6 && CC=gcc-6"
        - BUILD_TYPE=Release
      addons:
        apt:
          <<: *defApt
          packages: [*defPackages, g++-6]
    # With coverage and external tests
    - <<: *linux-gcc6
      env:
        - MATRIX_EVAL="CXX=g++-6 && CC=gcc-6" GCOV=gcov-6
        - BUILD_TYPE=Debug
        - ADDITIONAL_CMAKE_FLAGS="-DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_COVERAGE=ON"
      after_success: tools/ci/uploadCoverageData.sh
    - &linux-clang
      # GCC6 headers required
      <<: *linux-gcc6
      compiler: clang
      env: BUILD_TYPE=Release
    - <<: *linux-clang
      env: BUILD_TYPE=Debug
    - os: osx
      compiler: clang
      env: BUILD_TYPE=Debug
    # Latest version GCC with static analysis
    - os: linux
      compiler: gcc
      env:
        - MATRIX_EVAL="CXX=g++-9 && CC=gcc-9"
        - BUILD_TYPE=Debug
      addons:
        apt:
          <<: *defApt
          packages: [*defPackages, g++-9]
      script:
        - tools/ci/staticValidation.sh "$(pwd)"
        - tools/ci/travisBuild.sh
    # Latest Clang with externals
    - &latest-clang-externals
      os: linux
      compiler: clang
      addons:
        apt:
          sources: [*defSrcs, llvm-toolchain-xenial-8]
          packages: [*defPackages, g++-7, clang-8]
      env:
        - MATRIX_EVAL="CXX=clang++-8 && CC=clang-8"
        - BUILD_TYPE=Debug
        - ADDITIONAL_CMAKE_FLAGS="-DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_SANITIZERS=ON"
    - <<: *latest-clang-externals
      env:
        - MATRIX_EVAL="CXX=clang++-8 && CC=clang-8"
        - BUILD_TYPE=Debug
        - ADDITIONAL_CMAKE_FLAGS="-DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_SANITIZERS=ON"
        - BOOST_VERSION=1.70.0
