language: cpp
os: linux
dist: xenial
if: branch = master

addons:
  apt: &defApt
    packages: &defPackages
      - libsdl2-dev
      - libsdl2-mixer-dev
      - libcurl4-openssl-dev
      - libbz2-dev
      - libminiupnpc-dev
      - liblua5.2-dev
  homebrew:
    packages:
      - ccache
      - sdl2
      - sdl2_mixer
      - gettext
      - miniupnpc
    update: true

cache:
  - ccache
  - directories:
    - ${HOME}/.cache

before_install:
  - |
    echo "CC=$CC, CXX=$CXX, GCOV=$GCOV"
    export CC=$TRAVIS_COMPILER
    if [[ "$TRAVIS_COMPILER" =~ clang ]]; then
      export CXX=${TRAVIS_COMPILER/clang/clang++}
    elif [[ "$TRAVIS_COMPILER" =~ gcc ]]; then
      export CXX=${TRAVIS_COMPILER/gcc/g++}
    fi
    ver=7 # default
    if [[ "$TRAVIS_COMPILER" =~ gcc- ]]; then
      ver="${TRAVIS_COMPILER##*gcc-}"
    fi
    export GCOV=gcov-${ver}
    echo "CC=$CC, CXX=$CXX, GCOV=$GCOV"
  - DEPS_DIR="${HOME}/.cache"
  - mkdir -p "${DEPS_DIR}"

install:
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then export PATH="/usr/local/opt/gettext/bin:$PATH"; fi
  # Minimum requirements: CMake 3.9, Boost 1.64
  - |
    CMAKE_DIR="${DEPS_DIR}/cmake"
    external/libutil/tools/ci/installCMake.sh "3.9.6" "${CMAKE_DIR}"
    export PATH="${CMAKE_DIR}/bin:${PATH}"
  - |
    BOOST_VERSION=${BOOST_VERSION:-1.65.1}
    export BOOST_ROOT="${DEPS_DIR}/boost${BOOST_VERSION}"
    export ADDITIONAL_CMAKE_FLAGS="${ADDITIONAL_CMAKE_FLAGS} -DBoost_NO_SYSTEM_PATHS=ON -DBoost_NO_BOOST_CMAKE=ON"
    external/libutil/tools/ci/installBoost.sh "${BOOST_VERSION}" "${BOOST_ROOT}" "filesystem,system,program_options,thread,test,locale,iostreams,regex" shared

before_script: source external/libutil/tools/ci/setupXServer.sh

script: tools/ci/travisBuild.sh

anchors:
  llvm-toolchain-xenial-10: &llvm-toolchain-xenial-10
    sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main'
    key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
  gcc-6:  &gcc-6  { apt: { packages: [ *defPackages, "g++-6"  ], sources: [ ubuntu-toolchain-r-test ] } }
  gcc-9:  &gcc-9  { apt: { packages: [ *defPackages, "g++-9"  ], sources: [ ubuntu-toolchain-r-test ] } }
  clang-7:  &clang-7  { apt: { packages: [ *defPackages, "clang-7", "libstdc++-8-dev" ], sources: [ ubuntu-toolchain-r-test, "llvm-toolchain-xenial-7"  ] } }
  clang-10: &clang-10 { apt: { packages: [ *defPackages, "clang-10" ],                   sources: [ ubuntu-toolchain-r-test, *llvm-toolchain-xenial-10, ] } }

jobs:
  fast_finish: true
  include:
    - &linux-gcc6
      compiler: gcc-6
      addons: *gcc-6
      env: BUILD_TYPE=Release
    # With coverage and external tests
    - <<: *linux-gcc6
      env:
        - BUILD_TYPE=Debug
        - ADDITIONAL_CMAKE_FLAGS="-DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_COVERAGE=ON"
      after_success: tools/ci/uploadCoverageData.sh
    - compiler: clang-7
      addons: *clang-7
      env: BUILD_TYPE=Release
    - compiler: clang-7
      addons: *clang-7
      env: BUILD_TYPE=Debug
    - os: osx
      compiler: clang
      env: BUILD_TYPE=Debug
    # Latest GCC
    - compiler: gcc-9
      addons: *gcc-9
      env: BUILD_TYPE=Debug
    # Latest Clang with externals
    - compiler: clang-10
      addons: *clang-10
      env:
        - BUILD_TYPE=Debug
        - ADDITIONAL_CMAKE_FLAGS="-DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_SANITIZERS=ON"
    # Latest Clang with latest boost
    - compiler: clang-10
      addons: *clang-10
      env:
        - BUILD_TYPE=Debug
        - ADDITIONAL_CMAKE_FLAGS="-DRTTR_EXTERNAL_BUILD_TESTING=ON -DRTTR_ENABLE_SANITIZERS=ON"
        - BOOST_VERSION=1.73.0
